var result = 'number' + 3 + 3;
console.log(result)
/* у результаті отримуємо number33, бо 
1. спочатку ми виконуємо 'number' + 3, = number3, тобто js буде сприймати число 3 як string
2. потім ми складаємо number3 + 3 = number33
Тобто відбулась конкатенація. 
 */

var result1 = null + 3;
console.log(result1)
//отримуємо результат 3 бо null сприймається js як 0, тобто 0 + 3 = 3//

var result2 = 5 && "qwerty";
console.log(result2)
/* результат: qwerty.  && це логічний оператор "and", 
1. спочатку js обробляє число 5 і воно буде true оскільки це ані 0, ані null,
2. потім обробляє строку "qwerty" і оскільки вона не пуста і не undefined то це теж true.
3. Відтак, js виводить з двох значень що дорівнюють true саме останнє, "qwerty"
*/

var result3 = +'40' + +'2' + "hillel";
console.log(result3)
/*результат: 42hillel
1. перед строкою "40" стоїть унарний + тобто js тепер сприймає це як число 40
2. перед строкою "2" теж стоїть унарний +, відповідно тепер це число 2
3. тепер складаємо 40 + 2 = 42
4. залишається з'єднати число 42 та строку "hillel" тож отримуємо 42hillel, тобто конкатенація
*/

var result4 = '10' - 5 === 6;
console.log(result4)
/* результат: false
1. Оскільки в нас оператор -, то те, що написано в строці буде сприйматись як число, отже 10
2. 10 - 5 = 5
3. 5 не дорівнює 6, а === якраз порівнює два значення і вони не ідентичні, тобто виходить false
*/

var result5 = true + false;
console.log(result5)
/* результат 1 тому що js сприймає + як математичний оператор додавння,
тож true перетворюється на 1, а false на 0
1 + 0 = 1
*/

var result6 = '4px' - 3;
console.log(result6)
/* результат Nan
1. В нас є оператор віднімання - і тому js буде намагатись дістати зі строки число,
але оскільки в нас строка складається з числа та букви, тож не вийде з цього зробити число
2. тому строка - число = Nan - not a number
*/

var result7 = '4' - 3;
console.log(result7)
// результат 1 бо В нас є оператор віднімання - і тому js буде намагатись дістати зі строки число. В строці 4, тож 4-3=1 //

var result8 = '6' + 3 ** 0;
console.log(result8)
/* результат 61
1. спочатку розв'язуємо зведення у ступінь: все, що зводиться у 0 ступінь = 1, тому:
3 ** 0 =1
2. "6" це строка, тому в нас відбудеться конкатенація з 1 і виходить 61
*/

var result9 = 12 / '6';
console.log(result9)
/*результат: 2 бо при діленні з оператором / js буде діставати зі строки число, тож:
12 / 6 = 2
*/

var result10 = '10' + (5 === 6);
console.log(result10)
/* результат: 10false
1. спочатку виконується порівняння (5 ===6) тобто 5 не дорівнює 6 - тому false
2. тепер наш код виглядає так: "10" + false
3. оскільки "10" це строка тож в нас відбудеться конкатенація з false: 10false
*/

var result11 = null == '';
console.log(result11)
/* результат false
1. == нестроге равенство, при якому js буде визначати чи належать два значення до одного типу 
2. null це false, "" пуста строка це теж false
3. але у цьому випадку null не являється строкою, тому null та "" не належать до одного значення (string)
тому в результаті такого порівняння виходить false.
*/

var result12 = 3 ** (9 / 3);
console.log(result12)
/* результат 27
1. Робимо ділення в дужках: 9/3 =3
2. Далі возводимо 3 у степінь 3 = 27
*/

var result13 = !!'false' == !!'true';
console.log(result13)
/* результат: true
1. !! подвійне заперечення для приведення у boolean 
2. !!"false" це буде true бо будь-яка непуста строка являється true
3. !!"true" те ж саме - true
4. true == true тож отримуємо результат true
*/

var result14 = 0 || '0' && 1;
console.log(result14)
/* результат 1
1. По пріорітетності, спочатку виконуємо дію з логічним оператором && (і) який повертає перше false значення або останнє true,
якщо всі значення true;
'0' це не пуста строка, що дорівнює true, 1 це теж true 
тобто: '0' && 1 = 1 видає останнє true значеня
2. || це логічне "або" і цей оператор повертає перше true значення або останнє false якщо всі значення false
0 || 1 де 0 - це false, а 1 - це true, тож повертає 1
*/

var result15 = (+null == false) < 1;
console.log(result15)
/*результат false
1. унарний + приводить null до числа 0
2. порівнюємо 0 == false, де false перетворюється на 0 тож 0==0 що дорівнює true
3. true <1 тут, true перетворюється на 1 і 1<1 це буде false тому що 1 не менше 1
*/

var result16 = false && true || true;
console.log(result16)
/* результат: true
1. спочатку порівнюємо false && true, де && (та) повертає перше false значення або останнє true,
якщо всі значення true; тож нам поверне false
2. далі, оператор || (або) який повертає перше true значення або останнє false якщо всі значення false
false || true - відповідь true
*/

var result17 = false && (false || true);
console.log(result17)
/* результат: false
1. спочатку виконуємо порівння або || в дужках: (false || true) повертає перше значення true
2. тепер порівнюємо false && true і отримуємо false бо перше значення в нас false
*/

var result18 = (+null == false) < 1 ** 5;
console.log(result18)
/* результат: false
1. унарний + приводить null до 0, тож (0 == false)
2. Далі, false преобразується у 0 і виходить (0==0) тобто true
3. Далі, возводимо 1 у 5 степінь і отримуємо 1
4. Тепер порівнюємо true <1, де true преобразуєтсья в 1, тож 1<1 що є false, бо 1 не менша за 1
*/